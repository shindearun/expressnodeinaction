#!/usr/bin/env node

/**
 * Module dependencies.
 */
var http = require('http');
const db = require('../db');
const cluster = require('cluster');


/**
 * Get port from environment and store in Express.
 */

if (cluster.isMaster) {
  const numCPUs = require('os').cpus().length;
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }
  cluster.on('exit', (worker, code, signal) => {
    console.log('Worker %s died.', worker.process.pid);
  });
}else{
 db().then(() => { 
      var app = require('../app');
      var debug = require('debug')('expressproject:server');

      var port = normalizePort(process.env.PORT || '3000');
      app.set('port', port);
      
      app.listen(3000);
    console.log('Worker %d running!', cluster.worker.id);
      /**
       * Normalize a port into a number, string, or false.
       */

      function normalizePort(val) {
        var port = parseInt(val, 10);
        if (isNaN(port)) {
          // named pipe
          return val;
        }
        if (port >= 0) {
          // port number
          return port;
        }
        return false;
      }
      process.on('SIGINT', () => { // for ctrl +c
        console.log('SIGTERM signal received...');
        console.log('Closing http server.');
          db.getMongoClientVar().close().then(() => {
            console.log('MongoDb connection closed.');
            process.exit(0);
          });      
      });

}).catch((err) =>{
  console.log("not connected to server" ,err);
});
    }//else end